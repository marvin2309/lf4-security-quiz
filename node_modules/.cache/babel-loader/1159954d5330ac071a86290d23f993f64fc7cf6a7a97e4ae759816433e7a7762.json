{"ast":null,"code":"var _jsxFileName = \"/home/marvin/Dokumente/lf4-it-security-quiz/reactive-frontend/src/components/Quiz.tsx\",\n  _s = $RefreshSig$();\nimport * as React from \"react\";\n// @ts-ignore\n\n// @ts-ignore\nimport QuestionCard from \"./QuestionCard.tsx\";\n// @ts-ignore\nimport ProgressBar from \"./ProgressBar.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Quiz(props) {\n  _s();\n  const [index, setIndex] = React.useState(0);\n  const [endAnswers, setEndAnswers] = React.useState([]);\n  const [progress, setProgress] = React.useState(25);\n  function restart() {\n    setIndex(0);\n    setEndAnswers([]);\n  }\n  function summary(answers) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        progress: getPercentage(answers)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sie haben \", getPercentage(answers), \"% richtig!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: restart,\n        children: \"Erneut Versuchen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this);\n  }\n  function getPercentage(answers) {\n    if (answers) {\n      let count = 0;\n      for (let i = 0; i < answers.length; i++) {\n        if (answers[i]) {\n          count++;\n        }\n      }\n      return Math.round(count / answers.length * 100);\n    }\n  }\n  const questions = props.questions.map((question, index) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        progress: index / props.questions.length * 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(QuestionCard, {\n        answers: question.answers,\n        correctAnswers: question.correctAnswers,\n        explanation: question.explanation,\n        question: question.question,\n        nextIndex: setIndex,\n        setEndAnswers: setEndAnswers,\n        endAnswer: endAnswers,\n        id: index\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: index < questions.length ? questions[index] : summary(endAnswers)\n  }, void 0, false);\n}\n_s(Quiz, \"ZejWlOk/m93PC3EvFGEcCRlMBJk=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","QuestionCard","ProgressBar","jsxDEV","_jsxDEV","Fragment","_Fragment","Quiz","props","_s","index","setIndex","useState","endAnswers","setEndAnswers","progress","setProgress","restart","summary","answers","children","getPercentage","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","count","i","length","Math","round","questions","map","question","correctAnswers","explanation","nextIndex","endAnswer","id","_c","$RefreshReg$"],"sources":["/home/marvin/Dokumente/lf4-it-security-quiz/reactive-frontend/src/components/Quiz.tsx"],"sourcesContent":["import * as React from \"react\"\r\n// @ts-ignore\r\nimport { Question } from \"../types/types.ts\";\r\n// @ts-ignore\r\nimport QuestionCard from \"./QuestionCard.tsx\";\r\n// @ts-ignore\r\nimport ProgressBar from \"./ProgressBar.tsx\";\r\ntype Props = {\r\n    questions: Question[];\r\n}\r\n\r\nfunction Quiz(props: Props) {\r\n    const [index, setIndex] = React.useState<number>(0);\r\n    const [endAnswers, setEndAnswers] = React.useState<boolean[]>([]);\r\n    const [progress, setProgress] = React.useState(25);\r\n    function restart(){\r\n        setIndex(0);\r\n        setEndAnswers([]);\r\n    }\r\n\r\n    function summary(answers: boolean[]): React.ReactNode{\r\n        return (\r\n        <div>\r\n            <ProgressBar progress={getPercentage(answers)} />\r\n            <br />\r\n            <p>Sie haben {getPercentage(answers)}% richtig!</p>\r\n            <button type=\"submit\" onClick={restart}>Erneut Versuchen</button>\r\n        </div>\r\n        );\r\n    }\r\n    function getPercentage(answers: boolean[]){\r\n        if(answers) {\r\n        let count = 0;\r\n        for(let i = 0; i < answers.length; i++){\r\n            if(answers[i]){\r\n                count++;\r\n            }\r\n        }\r\n        return Math.round((count / answers.length* 100));\r\n    }\r\n}\r\n    const questions = props.questions.map((question, index) => {\r\n        return <div key={index}>\r\n            <ProgressBar progress={(index/props.questions.length)*100} />\r\n            <QuestionCard\r\n            answers={question.answers}\r\n            correctAnswers={question.correctAnswers}\r\n            explanation={question.explanation}\r\n            question={question.question}\r\n            nextIndex={setIndex}\r\n            setEndAnswers={setEndAnswers}\r\n            endAnswer={endAnswers}\r\n            id={index}/>\r\n        </div>\r\n    });\r\n    return (\r\n        <>\r\n           {index < questions.length ? questions[index] : summary(endAnswers)}\r\n        </>\r\n    );\r\n  }\r\n  \r\nexport default Quiz; \r\n  "],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B;;AAEA;AACA,OAAOC,YAAY,MAAM,oBAAoB;AAC7C;AACA,OAAOC,WAAW,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAK5C,SAASC,IAAIA,CAACC,KAAY,EAAE;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,KAAK,CAACY,QAAQ,CAAS,CAAC,CAAC;EACnD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,KAAK,CAACY,QAAQ,CAAY,EAAE,CAAC;EACjE,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,KAAK,CAACY,QAAQ,CAAC,EAAE,CAAC;EAClD,SAASK,OAAOA,CAAA,EAAE;IACdN,QAAQ,CAAC,CAAC,CAAC;IACXG,aAAa,CAAC,EAAE,CAAC;EACrB;EAEA,SAASI,OAAOA,CAACC,OAAkB,EAAkB;IACjD,oBACAf,OAAA;MAAAgB,QAAA,gBACIhB,OAAA,CAACF,WAAW;QAACa,QAAQ,EAAEM,aAAa,CAACF,OAAO;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACjDrB,OAAA;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACNrB,OAAA;QAAAgB,QAAA,GAAG,YAAU,EAACC,aAAa,CAACF,OAAO,CAAC,EAAC,YAAU;MAAA;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eACnDrB,OAAA;QAAQsB,IAAI,EAAC,QAAQ;QAACC,OAAO,EAAEV,OAAQ;QAAAG,QAAA,EAAC;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC/D;EAEV;EACA,SAASJ,aAAaA,CAACF,OAAkB,EAAC;IACtC,IAAGA,OAAO,EAAE;MACZ,IAAIS,KAAK,GAAG,CAAC;MACb,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,OAAO,CAACW,MAAM,EAAED,CAAC,EAAE,EAAC;QACnC,IAAGV,OAAO,CAACU,CAAC,CAAC,EAAC;UACVD,KAAK,EAAE;QACX;MACJ;MACA,OAAOG,IAAI,CAACC,KAAK,CAAEJ,KAAK,GAAGT,OAAO,CAACW,MAAM,GAAE,GAAG,CAAE;IACpD;EACJ;EACI,MAAMG,SAAS,GAAGzB,KAAK,CAACyB,SAAS,CAACC,GAAG,CAAC,CAACC,QAAQ,EAAEzB,KAAK,KAAK;IACvD,oBAAON,OAAA;MAAAgB,QAAA,gBACHhB,OAAA,CAACF,WAAW;QAACa,QAAQ,EAAGL,KAAK,GAACF,KAAK,CAACyB,SAAS,CAACH,MAAM,GAAE;MAAI;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eAC7DrB,OAAA,CAACH,YAAY;QACbkB,OAAO,EAAEgB,QAAQ,CAAChB,OAAQ;QAC1BiB,cAAc,EAAED,QAAQ,CAACC,cAAe;QACxCC,WAAW,EAAEF,QAAQ,CAACE,WAAY;QAClCF,QAAQ,EAAEA,QAAQ,CAACA,QAAS;QAC5BG,SAAS,EAAE3B,QAAS;QACpBG,aAAa,EAAEA,aAAc;QAC7ByB,SAAS,EAAE1B,UAAW;QACtB2B,EAAE,EAAE9B;MAAM;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAE;IAAA,GAVCf,KAAK;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAWhB;EACV,CAAC,CAAC;EACF,oBACIrB,OAAA,CAAAE,SAAA;IAAAc,QAAA,EACIV,KAAK,GAAGuB,SAAS,CAACH,MAAM,GAAGG,SAAS,CAACvB,KAAK,CAAC,GAAGQ,OAAO,CAACL,UAAU;EAAC,iBAClE;AAET;AAACJ,EAAA,CAjDMF,IAAI;AAAAkC,EAAA,GAAJlC,IAAI;AAmDb,eAAeA,IAAI;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}